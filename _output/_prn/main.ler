
                                                              Page :          1
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

      1 //*********************************************************************
        ********
      2 //
      3 // USDC TEMPLATE FIRMWARE for Q111 MCU  
      4 //
      5 // Program:	 LAPIS FeRAM Development Board Demo Code 
      6 //
      7 // Purpose:	 Demonstration Code for use with LAPIS MCU Development Boar
        d 
      8 //
      9 // This single Example code Demonstrates all the following modules work
        ing: 
     10 //		 1.) MCU Initialization (OSC; PORTS; PERIPHERIALS; WDT; etc.) 
     11 //		 2.) Demo of 2Hz INTERRUPT on TBC
     12 //		 3.) Demo of Timer-overflow INTERRUPTS on TMR 8/9
     13 //		 4.) Demo of Timer-overflow INTERRUPTS on TMR A/B
     14 //		 5.) Demo of Timer-overflow INTERRUPTS on TMR E/F
     15 //		 6.) Demo of Hardware PWM Control 
     16 //		 7.) UART TX Demo 
     17 //		 8.) UART RX Demo
     18 //		 9.) ADC Demo...
     19 //		10.) IsC Master Demo...    
     20 //
     21 // Authors:	 C. Schell, K. Bahar, F. Lee, & J. Fontus
     22 //		 	 ROHM Semiconductor USA, LLC
     23 //		 	 US Design Center
     24 //
     25 // Notes: 	
     26 //		1.) RTLU8 RUNTIME LIBRARIES:
     27 //				RTLU8 is a C runtime library for mcu's that use the LAPIS nX-U8 a
        s the CPU core
     28 //				RTLU8 provides a large number of routines that can be used when p
        rogramming 
     29 //				in C. Much effort and time can be saved by using these library ro
        utines.
     30 //				For Example, to use the sprintf library for UART commands, you ne
        ed to add 
     31 //				the "LU8100SW.lib" RT Library. To do this open the LAPIS IDE & se
        lect:
     32 //				'Project -> Options -> Target' from the menu bar.  In the "Genera
        l" Tab, 
     33 //				type in "LU8100SW.lib" to add the RTLU8 runtime library for small
         memory 
     34 //				model containing sprintf and many other routines
     35 //		2.) CHECKING THE PROGRAM SIZE:
     36 //				You can check the program size from the map file generated during

                                                              Page :          2
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

         "Compile" step by the Linker. 
     37 //				Please refer to CCU8 programming guide: (3.1. Map Files and 3.1.4
        . Program and Data size)
     38 //				Results will look something like this:
     39 //					Program and Data Sizes
     40 //					This portion of the map file gives aggregate program and data si
        zes for each segment type.
     41 //						Total size (CODE  ) = 02CE4   (11492)
     42 //						Total size (DATA  ) = 002E7   (743)
     43 //						Total size (BIT   ) = 00000.0 (0.0)
     44 //						Total size (NVDATA) = 00000   (0)
     45 //						Total size (NVBIT ) = 00000.0 (0.0)
     46 //						Total size (TABLE ) = 0828A   (33418)
     47 //
     48 // Started:  April 6th, 2013
     49 // Updated:	 JULY 24th, 2014
     50 //*********************************************************************
        ********
     51 
     52 // ================================ ML610Q111 =========================
        ======== 
     53 //	ML610Q111 MCU PINOUT - TSSOP20 Package
     54 //
     55 // 		Pin 01 of mcu => PC0 / TM9OUT / PWMF0 
     56 // 		Pin 02 of mcu => RESET_N
     57 // 		Pin 03 of mcu => TEST
     58 // 		Pin 04 of mcu => PB0 / CMP1OUT / OUTCLK / PWMC / RXD0 / AIN2 / EXI
        4
     59 // 		Pin 05 of mcu => PB1 / TXD1 / TXD0 / PWMD / AIN3 / EXI5 
     60 // 		Pin 06 of mcu => PB2 / PWME / RXD1 / EXI6 
     61 // 		Pin 07 of mcu => PB3 / TXD1 / SIN / EXI7 
     62 // 		Pin 08 of mcu => PA2 / CMP0OUT / CLKIN / PWME / EXI2 
     63 // 		Pin 09 of mcu => TESTF
     64 // 		Pin 10 of mcu => PC3 / TMFOUT
     65 
     66 // 		Pin 11 of mcu => PC2 / PWMF2 
     67 // 		Pin 12 of mcu => PA1 / EXI1 / AIN1 / CMP1P / PWMD / LSCLK / TMFOUT
        
     68 // 		Pin 13 of mcu => PB4 / CMP0P / SOUT / TXD0 / TXD1
     69 // 		Pin 14 of mcu => PB5 / CMP0M / RXD0 / SCK / SCL / PWMF2
     70 // 		Pin 15 of mcu => PB6 / AIN4 / CLKIN / SDA / PWMF1
     71 // 		Pin 16 of mcu => VSS
     72 // 		Pin 17 of mcu => VDD
     73 // 		Pin 18 of mcu => PB7 / AIN5 / RXD1 / LSCLK / PWMF0 / PWMC
     74 // 		Pin 19 of mcu => PA0 / EXI0 / AIN0 / PWMC / OUTCLK / TM9OUT
     75 // 		Pin 20 of mcu => PC1 / PWMF1

                                                              Page :          3
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

     76 //
     77 //=====================================================================
        ========
     78 
     79 //*********************************************************************
        ********
     80 // Microcontroller's connections on the LAPIS MCU Development Board to 
        the 
     81 //  Plug 'n Play, Raspberry Pi Compatible, Universal Connectors:
     82 //
     83 // Pin-01 => 3.3V Power					Pin-02 => 5.0V Power (VBUS)
     84 // Pin-03 => I2C-SDA  (Q111 I/O B.6)	Pin-04 => no connection
     85 // Pin-05 => I2C-SCL  (Q111 I/O B.5)*	Pin-06 => GROUND
     86 // Pin-07 => no connection*				Pin-08 => UART-TX  (Q111 I/O B.1)
     87 // Pin-09 => no connection				Pin-10 => UART-RX  (Q111 I/O B.0) 
     88 // Pin-11 => GPIO #17 (Q111 I/O A.0)	Pin-12 => GPIO #18 (Q111 I/O B.7)
     89 // Pin-13 => GPIO #21 (Q111 I/O A.1)	Pin-14 => no connection
     90 // Pin-15 => GPIO #22 (Q111 I/O A.2)	Pin-16 => GPIO #23 (Q111 I/O C.2)
     91 // Pin-17 => no connection				Pin-18 => GPIO #24 (Q111 I/O C.3)
     92 // Pin-19 => SPI-MOSI (Q111 I/O B.4)	Pin-20 => no connection
     93 // Pin-21 => SPI-MISO (Q111 I/O B.3)	Pin-22 => GPIO #25 (Q111 I/O B.2)
     94 // Pin-23 => SPI-SCLK (Q111 I/O B.5)*	Pin-24 => SPI-CS0  (Q111 I/O C.0)
        
     95 // Pin-25 => no connection				Pin-26 => SPI-CS1  (Q111 I/O C.1)
     96 // 
     97 //=====================================================================
        ========
     98 //*********************************************************************
        ********
     99 
    100 //*********************************************************************
        ********
    101 // Q111 Microcontroller's I/O Pins at J3 on the LAPIS MCU Development B
        oard 
    102 //
    103 // Pin-01 => A.0				Pin-02 => A.1
    104 // Pin-03 => A.2				Pin-04 => B.0
    105 // Pin-05 => B.1				Pin-06 => B.2
    106 // Pin-07 => B.3				Pin-08 => B.4
    107 // Pin-09 => B.5				Pin-10 => B.6 
    108 // Pin-11 => B.7				Pin-12 => C.0
    109 // Pin-13 => C.1				Pin-14 => C.2
    110 // Pin-15 => C.3				Pin-16 => GROUND
    111 //
    112 //=====================================================================
        ========

                                                              Page :          4
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    113 //*********************************************************************
        ********
    114 
    115 
    116 //***** PREPROCESSOR DIRECTIVES ***************************************
        ********
    117  // INCLUDED FILES...
    118 	#include	<ML610111.H>	// Lapis Micro ML610Q111 on LAPIS MCU Developmen
        t Board
    119 	#include	<stdlib.h>		// General-purpose utilities
    120 	#include	<stdio.h>		// I/O-related processing
    121 	#include 	<common.h>		// Common Definitions
    122 	#include 	<irq.h>			// IRQ Definitions
    123 	#include 	<mcu.h>			// MCU Definition
    124 	#include	<i2c.h>			// I2C Definition
    125 	#include 	<tbc.h>			// Set TBC (Timer Based Clock) API
    126 	#include 	<timer.h>		// Timer Macros & APIs
    127 	#include	<math.h>		// Mathematical functions
    128 	#include 	<uart.h>		// UART Function Prototypes
    129 	#include	<feram_i2c.h>	// FeRAM Function Prototypes
***** main\feram_i2c.h(108) : Warning : W5027 : Meaningless use of an expressio
        n
    130 	//#include	<float.h>		// Numerical limits for floating-point numbers	
    131 	//#include	<string.h>		// Character string manipulation routines
    132 	//#include	<yvals.h>		// Called for by most Header Files
    133 
    134 	//#include 	<main.h>		// Clear WDT API
    135 	//#include	<ctype.h>		// Character classification and conversion 
    136 	//#include	<errno.h>		// Error identifiers Library
    137 	//#include	<limits.h>		// Numerical limits for integers
    138 	//#include	<muldivu8.h>	// Multiplication and Division accelerator
    139 	//#include	<setjmp.h>		// Global jump (allow jumps to locations outsid
        e the current function) 
    140 	//#include	<signal.h>		// Signal handling functions
    141 	//#include	<stdarg.h>		// Variable numbers of arguments
    142 	//#include	<stddef.h>		// Standard types and macros 
    143 	//#include	<yfuns.h>		//  
    144 	
    145 //*********************************************************************
        ********
    146  // I/O PIN DATA ALIASES...
    147 // Connections for Q111 Universal Socket
    148 	#define RX 			PB0D 
    149 	#define TX 			PB1D
    150  
    151 	#define I2C_SDA 	PB6D 

                                                              Page :          5
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    152 	#define I2C_SCL 	PB5D 
    153 
    154 	#define GPIO_17		PA0D
    155 	#define GPIO_21		PA1D
    156 	#define GPIO_22		PA2D
    157 	#define GPIO_18		PB7D
    158 	#define GPIO_23		PC2D
    159 	#define GPIO_24		PC3D
    160 	#define GPIO_25		PB2D
    161 
    162 	#define SPI_MOSI	PB4D
    163 	#define SPI_MISO	PB3D
    164 	#define SPI_SCL 	PB5D
    165 	#define SPI_CS0		PC0D
    166 	#define SPI_CS1 	PC1D 	
    167 	
    168 	
    169 
    170 //*********************************************************************
        ********
    171 //=====================================================================
        ======
    172 //   MACROS: 
    173 //=====================================================================
        ======
    174 
    175 // ===== Peripheral setting.=====
    176 	#define HSCLK_KHZ	( 8192u )	// 8MHz = 8000kHz (will be multiplied by 1
        024 to give 8,192,000Hz)
    177 	#define FLG_SET	    ( 0x01u ) 	
    178 
    179 // ===== SET DESIRED UART SETTINGS HERE! (Options in UART.h) ==========
        ======
    180 #define UART_BAUDRATE		( UART_BR_9600BPS) 	// Data Bits Per Second - Te
        sted at rates from 2400bps to 512000bps!
    181 #define UART_DATA_LENGTH	( UART_LG_8BIT )		// x-Bit Data
    182 #define UART_PARITY_BIT		( UART_PT_NON )			// Parity
    183 #define UART_STOP_BIT		( UART_STP_1BIT )		// x Stop-Bits
    184 #define UART_LOGIC			( UART_NEG_POS )		// Desired Logic
    185 #define UART_DIRECTION		( UART_DIR_LSB )		// LSB or MSB First 
    186 
    187 		// ===== UART Settings =====
    188 		//STRUCTURE:
    189 			static const tUartSetParam  _uartSetParam = {		// UART Parameters
    190 				UART_BAUDRATE,						// Members of Structure...
    191 				UART_DATA_LENGTH,					// Members of Structure...

                                                              Page :          6
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    192 				UART_PARITY_BIT,					// Members of Structure...
    193 				UART_STOP_BIT,						// Members of Structure...
    194 				UART_LOGIC,							// Members of Structure...
    195 				UART_DIRECTION						// Members of Structure...
    196 			};
    197 //=====================================================================
        ======
    198 
    199 
    200 
    201 //*********************************************************************
        ********
    202 //=====================================================================
        ======
    203 //   STRUCTURES: 
    204 //=====================================================================
        ======
    205 	//Example Structure Declaration
    206 	typedef struct {
    207 		unsigned char state     : 1;
    208 		unsigned char state_sub : 2;
    209 		unsigned char reserve   : 5;
    210 	} STRUCT_STATE;	 
    211 
    212 
    213 //*********************************************************************
        ********
    214 
    215 
    216 //*********************************************************************
        ********
    217 //=====================================================================
        ======
    218 //   FUNCTION PROTOTYPES: 
    219 //	Establishes the name and return type of a function and may specify t
        he 
    220 // 	types, formal parameter names and number of arguments to the functi
        on                                 
    221 //=====================================================================
        ======
    222 	void main_clrWDT( void );				// no return value and no arguments
    223 	void Initialization( void );			// no return value and no arguments
    224 	void SetOSC( void );					// no return value and no arguments
    225 
    226 	static void NOPms(unsigned int ms);		// no return value - Delay in ms 
        as Argument

                                                              Page :          7
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    227 	void NOPx( unsigned int MyCount );		// no return value - Count in ms a
        s Argument
    228 	void PWM_B0_ON(int myPeriod, int myDutyCycle);		// no return value - P
        eriod & DutyCycle Variables as Arguments
    229 
    230 	void analog_comparator( void );			
    231 	void PortA_Low( void );					// no return value and no arguments
    232 	void PortB_Low( void );					// no return value and no arguments
    233 	void PortC_Low( void );					// no return value and no arguments
    234 	void PortA_Digital_Inputs( void );		// no return value and no argument
        s
    235 	void PinB0_PWM( void ); 				// no return value and no arguments
    236 	void main_reqNotHalt( void );			// no return value and no arguments
    237 
    238 	static void _initPeri( void );
    239 	static void _intWdt( void );
    240 	static void _intTimer( void );
    241 
    242 	void _funcUartFin( unsigned int size, unsigned char errStat );
    243 	void _intUart( void );
    244 
    245 	void _funcI2CFin( unsigned int size, unsigned char errStat );
    246 	void checkI2C( void );
    247 	void _intI2c( void );
    248 
    249 	void _intADC( void );
    250 	
    251 	void TBC_ISR( void );			// TBC Interrupt Service Routine...
    252 	void TMR89_ISR( void );			// TIMER 8/9 Interrupt Service Routine...
    253 	void TMRAB_ISR( void );			// TIMER A/B Interrupt Service Routine...
    254 	void TMREF_ISR( void );			// TIMER E/F Interrupt Service Routine...
    255 	void ExtInt_ISR( void );		// External Interrupt Interrupt Service Rout
        ine...
    256 	
    257 	void SerialLCD_Init_and_Clear (void);	// no return value and no argume
        nts 
    258 
    259 	void UART_TX_TEST (void);				// no return value and no arguments
    260 	void UART_RX_TEST (void);				// no return value and no arguments
    261 
    262 //*********************************************************************
        ********
    263 //GLOBALS...
    264 
    265 	//UART, I2C & ADC Variables
    266 	unsigned char	_flgUartFin;

                                                              Page :          8
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    267 	unsigned char 	_flgI2CFin;
    268 	unsigned char	_flgADCFin;
    269 	unsigned char	_reqNotHalt;
    270 	
    271 
    272 /*######################################50#############################
        #########*/
    273 /*#                                  APIs                              
              #*/
    274 /*#####################################################################
        #######*/
    275 //*********************************************************************
        ********
    276 //=====================================================================
        ======
    277 //  	Start of MAIN FUNCTION
    278 //=====================================================================
        ======
    279 int main(void) 
    280 {
    281 	//LOCAL VARIABLES
    282 	char char_a;				// -128 to 127
    283 	unsigned char uchar;		// 0-255
    284 	unsigned int uint, delay;	// 0 to 65,535
    285 	long long_a;				// -2,147,483,648 to 2,147,483,647
    286 	float float_a;				// 1.17549435e-38 to 3.40282347e+38
    287 	double double_a;			// 2.2250738585072014e-308 to 1.7976931348623157e+3
        08 
    288 	int i,j,k,x,y;				// -32,768 to 32767
    289 	
    290 	
    291 
    292 	Init:
    293 		Initialization();		// Init Micro...(Ports, Timers, OSC, IRQ's, UART, 
        etc...)
    294 			
    295 		
    296 	Primary_Loop:		
    297 		//PLACE USER CODE HERE...
    298 		
    299 		
    300 		
    301 		// ==FLASHING LED CODE== //
    302 		
    303 		GPIO_17 ^=1; 			// Enables an LED connected at GPIO_17 on the Q111 to
         flash

                                                              Page :          9
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    304 		main_clrWDT();			// Clear WDT
    305 		NOPx(65000);			// Delay slows down the flashing of the LED to be visi
        ble to the human eye
***** main\main.c(305) : Warning : W5013 : Parameter mismatch, actual parameter
         converted
    306 		NOPx(65000);			// Delay slows down the flashing of the LED to be visi
        ble to the human eye
***** main\main.c(306) : Warning : W5013 : Parameter mismatch, actual parameter
         converted
    307 		
    308 		//  ==END OF FLASHING LED CODE==  //
    309 		
    310 	goto Primary_Loop;
    311 		
    312 
    313 }//end main
    314 
    315 //=====================================================================
        ======
    316 //  	End of MAIN FUNCTION
    317 //=====================================================================
        ======
    318 //*********************************************************************
        ********
    319 
    320 
    321 
    322 
    323 //*********************************************************************
        ********
    324 //=====================================================================
        ======
    325 //  	Start of Other Functions...
    326 //=====================================================================
        ======
    327 //*********************************************************************
        ********
    328 
    329 
    330 /**********************************************************************
        *********
    331 	Routine Name:	main_clrWDT
    332 	Form:			void main_clrWDT( void )
    333 	Parameters:		void
    334 	Return value:	void
    335 	Description:	clear WDT.

                                                              Page :         10
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    336 ***********************************************************************
        *******/
    337 
    338 void main_clrWDT( void )
***** main\main.c(313) : Warning : W5029 : 'y': unreferenced local variable
***** main\main.c(313) : Warning : W5029 : 'x': unreferenced local variable
***** main\main.c(313) : Warning : W5029 : 'k': unreferenced local variable
***** main\main.c(313) : Warning : W5029 : 'j': unreferenced local variable
***** main\main.c(313) : Warning : W5029 : 'i': unreferenced local variable
***** main\main.c(313) : Warning : W5029 : 'double_a': unreferenced local varia
        ble
***** main\main.c(313) : Warning : W5029 : 'float_a': unreferenced local variab
        le
***** main\main.c(313) : Warning : W5029 : 'long_a': unreferenced local variabl
        e
***** main\main.c(313) : Warning : W5029 : 'delay': unreferenced local variable
***** main\main.c(313) : Warning : W5029 : 'uint': unreferenced local variable
***** main\main.c(313) : Warning : W5029 : 'uchar': unreferenced local variable
***** main\main.c(313) : Warning : W5029 : 'char_a': unreferenced local variabl
        e
***** main\main.c(313) : Warning : W6002 : 'Init': unreferenced label
    339 {
    340 	//__DI(); // Disable multi-interrupts
    341 		do {
    342 			WDTCON = 0x5Au;
    343 		} while (WDP != 1);
    344 		WDTCON = 0xA5u;
    345 
    346 	//__EI(); // Re-Enable multi-interrupts
    347 }
    348 
    349 //=====================================================================
        ======
    350 //	Initialize Micro to Desired State...
    351 //=====================================================================
        ======
    352 static void Initialization(void){
    353 
    354 	//Initialize Peripherals	
    355 		//BLKCON2 Control Bits...Manually Set 4/12/2013
    356 			DSIO0 = 1; // 0=> Enables Synchronous Serial Port 0 
    357 			DUA0  = 0; // 0=> Enables the operation of UART0 
    358 			DUA1  = 1; // 0=> Enables Uart1 
    359 			DI2C1 = 1; // 0=> Enables I2C bus Interface (Slave) 
    360 			DI2C0 = 0; // 0=> Enables I2C bus Interface (Master)	
    361 	

                                                              Page :         11
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    362 		BLKCON4 = 0x00; // SA-ADC: 0=> Enables ; 0xFF=> Disables
    363 		BLKCON6 = 0x00; // Timers 8, 9, A, E, F : 0=> Enables ; 0xFF=> Disabl
        es
    364 		BLKCON7 = 0x00; // PWM (PWMC, PWMD, PWME, PWMF : 0=> Enables ; 0xFF=>
         Disables
    365 
    366 	// Port Initialize...
    367 		PortA_Low();	//Initialize all 3 Ports of Q111 Port A to GPIO-Low
    368 		PortB_Low();	//Initialize all 8 Ports of Q111 Port B to GPIO-Low
    369 		PortC_Low();	//Initialize all 4 Ports of Q111 Port C to GPIO-Low
    370 
    371 	// UART INIT...	
    372 		//uart_0_Init();
    373 				
    374 				
    375 	// ===== Set Oscillator Rate =====
    376      	SetOSC(); 	//8MHz
    377 
    378 	// ===== PWM =========================================================
        =======
    379 	//
    380 	//	NOTE: Possible conflict of B.0 with RX pin from UART0
    381 	//	
    382 	//	PinB0_PWM();		// Set up PWM peripheral (Pin on B.0)
    383 	//====================================================================
        =======	
    384 		
    385 	// ===== Comparator =====	
    386 		//analog_comparator();	//Set up anaolg comparator peripheral
    387 
    388 
    389 /* 	// ===== SET SPECIFIC DESIRED PINS AS INPUTS =====
    390 		//Setup PIR Sensor Input on B.4
    391 			//Step 1: Set Pin Direction...
    392 				PB4DIR = 1;			// PortB Bit4 set Direction to INPUT...
    393 			//Step 2: Set Pin I/O Type...
    394 				PB4C1  = 0;			// PortB Bit4 set Type to HIGH-IMPEDANCE INPUT...
    395 				PB4C0  = 0;	
    396 			//Step 3: Set Pin Purpose...
    397 				PB4MD1  = 0;		// PortB Bit4 set Purpose to GENERAL PURPOSE Input/Ou
        tput...
    398 				PB4MD0  = 0;
    399 
    400 		//Setup HALL Sensor Input on B.3
    401 			//Step 1: Set Pin Direction...
    402 				PB3DIR = 1;			// PortB Bit3 set Direction to INPUT...

                                                              Page :         12
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    403 			//Step 2: Set Pin I/O Type...
    404 				PB3C1  = 0;			// PortB Bit3 set Type to HIGH-IMPEDANCE INPUT...
    405 				PB3C0  = 0;	
    406 			//Step 3: Set Pin Purpose...
    407 				PB3MD1  = 0;		// PortB Bit3 set Purpose to GENERAL PURPOSE Input/Ou
        tput...
    408 				PB3MD0  = 0;
    409 
    410 		//Setup ACCELEROMETER X-SIGNAL Sensor Input on A.2
    411 			//Step 1: Set Pin Direction...
    412 				PA2DIR = 1;			// PortA Bit2 set Direction to INPUT...
    413 			//Step 2: Set Pin I/O Type...
    414 				PA2C1  = 0;			// PortA Bit2 set Type to HIGH-IMPEDANCE INPUT...
    415 				PA2C0  = 0;	
    416 			//Step 3: Set Pin Purpose...
    417 				PA2MD1  = 0;		// PortA Bit2 set Purpose to GENERAL PURPOSE Input/Ou
        tput...
    418 				PA2MD0  = 0;
    419 		
    420 		//Setup ACCELEROMETER Y-SIGNAL Sensor Input on A.1
    421 			//Step 1: Set Pin Direction...
    422 				PA1DIR = 1;			// PortA Bit1 set Direction to INPUT...
    423 			//Step 2: Set Pin I/O Type...
    424 				PA1C1  = 0;			// PortA Bit1 set Type to HIGH-IMPEDANCE INPUT...
    425 				PA1C0  = 0;	
    426 			//Step 3: Set Pin Purpose...
    427 				PA1MD1  = 0;		// PortA Bit1 set Purpose to GENERAL PURPOSE Input/Ou
        tput...
    428 				PA1MD0  = 0;
    429 
    430 		//Setup ACCELEROMETER Temperature-SIGNAL Sensor Input on A.0
    431 			//Step 1: Set Pin Direction...
    432 				PA0DIR = 1;			// PortA Bit0 set Direction to INPUT...
    433 			//Step 2: Set Pin I/O Type...
    434 				PA0C1  = 0;			// PortA Bit0 set Type to HIGH-IMPEDANCE INPUT...
    435 				PA0C0  = 0;	
    436 			//Step 3: Set Pin Purpose...
    437 				PA0MD1  = 0;		// PortA Bit0 set Purpose to GENERAL PURPOSE Input/Ou
        tput...
    438 				PA0MD0  = 0; */
    439 
    440 	//================== STANDBY CONTROL REGISTER=========================
        ==========
    441 	//
    442 	// SBYCON is a 2-bit special function register to control operating mo
        de of MCU

                                                              Page :         13
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    443 	//		STP   :   HLT
    444 	// 		BIT 1 :  BIT 0
    445 	//  	 0         0     => Program RUN mode (initial value)
    446 	//  	 0         1     => HALT mode
    447 	//  	 1         0     => STOP mode
    448 	//  	 1         1     => (Prohibited)
    449 	// See ML610Q111/ML610Q112 User Manual - Section 4: MCU Control Functi
        on
    450 	//	SBYCON = 0;		// Program RUN mode
    451 	//====================================================================
        ==========
    452 
    453 	//================== VOLTAGE LEVEL SUPERVISOR REGISTER ===============
        ==========
    454 	// 
    455 	// The Q11x mcu's have two channels of VOLTAGE LEVEL SUPERVISORs
    456 	// Accuracy is ±3%
    457 	//
    458 	// The threshold voltages of VLS0 (VDD fall) : 2.85V (Typ. )
    459 	//								  (VDD rise) : 2.92V (Typ. )
    460 	//
    461 	// The threshold voltages of VLS1 (VDD fall) : 4 types selectable 3.3V
        / 3.6V/ 3.9V/ 4.2V (Typ.)
    462 	// The VLS0 can be used as the low voltage level detector reset.
    463 	// 
    464 	// See ML610Q111/ML610Q112 User Manual - Section 22: Voltage Level Sup
        ervisor
    465 	//
    466 	//====================================================================
        ==========
    467 
    468    	// IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
    469 	// INTERRUPT SETUP...
    470 		//	The ML610Q1xx mcu's have 31 hardware interrupt sources 
    471 		//		 7 External Interrupt Sources
    472 		//		24 Internal Interrupt Sources 
    473 		// EXAMPLE: WDT; VLS; EXTERNAL INT Pins (6); SPI; ADC; I2C (Slave); I
        2C (Master);
    474 		//			TIMERS (6); UART; Comparators (2); PWM's ((4); TBC (4)		
    475 	
    476 		irq_di();	// Disable Interrupts
    477 		//irq_init();	// Initialize Interrupts (All Off and NO Requests)
    478 			//==================================================================
        ==
    479 			//FOR NOTES ONLY...This is all taken care of in "irq_init()"
    480 				// INTERRUPT ENABLE REGISTERS...

                                                              Page :         14
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    481 				//  IE0 = VOLTAGE LEVEL SUPERVISOR Int.
    482 				//  IE1 = EXTERNAL Ints on B3, B2, B1, B0, A2, A1, & A0
    483 				//  IE2 = SPI, A/D, I2C Slave & I2C Master Int.
    484 				//  IE3 = TIMERS 8 & 9 Ints.
    485 				//  IE4 = UART & COMPARATOR Ints.
    486 				//  IE5 = TIMERS A, B, E & F Ints.
    487 				//  IE6 = PWMC, PWMD, PWME, PWMF & 128Hz & 32Hz TBC Ints.
    488 				//  IE7 = 16Hz & 2Hz TBC Ints.
    489 				//IE0 = IE1 = IE2 = IE3 = IE4 = IE5 = IE6 = IE7 = 0;
    490 				//--------------------------------------------------------------
    491 				// INTERRUPT REQUEST FLAG REGISTERS...
    492 				//  IRQ0 = WDT & VLS Int Requests
    493 				//  IRQ1 = EXTERNAL Int Requests
    494 				//  IRQ2 = SPI, A/D, I2C Slave & I2C Master Int Requests
    495 				//  IRQ3 = TIMERS 8 & 9 Int Requests 
    496 				//  IRQ4 = UART & COMPARATOR Int Requests 
    497 				//  IRQ5 = TIMERS A, B, E & F Int Requests 
    498 				//  IRQ6 = PWMC &  128Hz & 32Hz TBC Int Requests 
    499 				//  IRQ7 = 16Hz & 2Hz TBC Int Requests 
    500 				//IRQ0 = IRQ1 = IRQ2 = IRQ3 = IRQ4 = IRQ5 = IRQ6 = IRQ7 = 0;
    501 			//==================================================================
        ==
    502 
    503 			// INTERRUPT ENABLE REGISTERS...
    504 				IE0 = IE1 = IE2 = IE3 = IE4 = IE5 = IE6 = IE7 = 0;
    505 
    506 
    507 			// INTERRUPT REQUEST REGISTERS...
    508 				IRQ0 = IRQ1 = IRQ2 = IRQ3 = IRQ4 = IRQ5 = IRQ6 = IRQ7 = 0;
    509 
    510  			//------------- SET UP UART Interrupts Handler --------------------
        -----------------------
    511 				(void)irq_setHdr( (unsigned char)IRQ_NO_UA0INT, _intUart );
    512 					EUA0 = 1; 	// EUA0 is the enable flag for the UART0 interrupt (1=E
        NABLED)
***** main\main.c(511) : Warning : W5027 : Meaningless use of an expression
    513 					QUA0 = 0;	// Request Flag for the UART_0 	INTERRUPT (1=REQUEST, 0-
        NO-REQUEST)
    514 			//------------------------------------------------------------------
        ----------------------
    515 			
    516  			//------------- SET UP I2C MASTER Interrupts Handler --------------
        -----------------------
    517 				(void)irq_setHdr( (unsigned char)IRQ_NO_I2CMINT, _intI2c );
    518 					EI2CM = 1; // EI2CM is the enable flag for the I2C MASTER interrup
        t (1=ENABLED)

                                                              Page :         15
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

***** main\main.c(517) : Warning : W5027 : Meaningless use of an expression
    519 					QI2CM = 0;
    520 			//------------------------------------------------------------------
        ----------------------
    521 			
    522 			//------------- SET UP ADC Interrupts Handler ----------------------
        ----------------------
    523 				(void)irq_setHdr( (unsigned char)IRQ_NO_SADINT, _intADC );
    524 					ESAD = 1; // ESAD is the enable flag for the ADC interrupt (1=ENAB
        LED)
***** main\main.c(523) : Warning : W5027 : Meaningless use of an expression
    525 					QSAD = 0; // Request Flag for the ADC INTERRUPT (1=REQUEST, 0-NO-R
        EQUEST)
    526 			//------------------------------------------------------------------
        ----------------------
    527 			
    528 			//------------- SET UP  xHz TBC Interrupt (Options: 128Hz, 32Hz, 16H
        z, 2Hz) --------------
    529 				(void)irq_setHdr( (unsigned char)IRQ_NO_T2HINT, TBC_ISR );  //Clear
         interrupt request flag
    530 					E2H = 1;	  // Enable x Hz TBC Interrupt (1=ENABLED)
***** main\main.c(529) : Warning : W5027 : Meaningless use of an expression
    531 					Q2H = 0;	  // Request flag for the TIME BASE COUNTER 2Hz Interrupt
        
    532 			// -----			
    533 			//------------- TBC...Set Ratio: : 1:1 => 1_1 ----------------------
        ----------------------
    534 				(void)tb_setHtbdiv( (unsigned char)TB_HTD_1_1 ); //Set the ratio of
         dividing frequency of the time base counter
    535 			//------------------------------------------------------------------
        ---------------------- 
    536 			
    537  			//------------- SET UP TIMER 8/9 Interrupt to increment timers ever
        y ~X ms ---------------
    538 				(void)irq_setHdr( (unsigned char)IRQ_NO_TM9INT, TMR89_ISR );  //Cle
        ar interrupt request flag
***** main\main.c(534) : Warning : W5027 : Meaningless use of an expression
    539 					ETM8 = 1;	  	// Enable timer 8 Interrupt (1=ENABLED
***** main\main.c(538) : Warning : W5027 : Meaningless use of an expression
    540 					ETM9 = 1;	  	// Enable timer 9 Interrupt (1=ENABLED)
    541 					QTM8 = 0;		// Timer 8 IRQ request flag; 1=REQUEST
    542 					QTM9 = 0;		// Timer 9 IRQ request flag; 1=REQUEST
    543 					T8CS0 = 1;		// 111 => Select PLLCLK
    544 					T8CS1 = 1;
    545 					T8CS2 = 1;
    546 					T9CS0 = 1;		// 111 => Select PLLCLK

                                                              Page :         16
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    547 					T9CS1 = 1;
    548 					T9CS2 = 1; 
    549 					tm_init(TM_CH_NO_89);
    550 					tm_set89Data(8192);				//A value of 1023 should yield 125us interr
        upts at 8.192 MHz
    551 					tm_set89Source(TM_CS_HTBCLK);
    552 					tm_start89();
    553 					T89M16 = 1;		//1 => sets 16-bit timer mode
    554 				
    555 					HTD3 = 1;	//High-Speed Time Base Counter Divide Register: 1111 = 9
        182kHz
    556 					HTD2 = 1;
    557 					HTD1 = 1;
    558 					HTD0 = 1; 
    559 			//------------------------------------------------------------------
        ----------------------
    560 
    561 			
    562  			//------------- SET UP TIMER A/B Interrupt to increment timers ever
        y ~X ms ---------------
    563 				(void)irq_setHdr( (unsigned char)IRQ_NO_TMBINT, TMRAB_ISR );  //Cle
        ar interrupt request flag
    564 					ETMA = 1;	  	// Enable timer 8 Interrupt (1=ENABLED
***** main\main.c(563) : Warning : W5027 : Meaningless use of an expression
    565 					ETMB = 1;	  	// Enable timer 9 Interrupt (1=ENABLED)
    566 					QTMA = 0;		// timer 8 IRQ request flag; 1=REQUEST
    567 					QTMB = 0;		// timer 9 IRQ request flag; 1=REQUEST
    568 					TACS0 = 1;		// 111 => Select PLLCLK
    569 					TACS1 = 1;
    570 					TACS2 = 1;
    571 					TBCS0 = 1;		// 111 => Select PLLCLK
    572 					TBCS1 = 1;
    573 					TBCS2 = 1; 
    574 					tm_init(TM_CH_NO_AB);
    575 					tm_setABData(8192);				//A value of 1023 should yield 125us interr
        upts at 8.192 MHz
    576 					tm_setABSource(TM_CS_HTBCLK);
    577 					tm_startAB();
    578 					TABM16 = 1;		//1 => sets 16-bit timer mode
    579 				
    580 					HTD3 = 1;	//High-Speed Time Base Counter Divide Register: 1111 = 9
        182kHz
    581 					HTD2 = 1;
    582 					HTD1 = 1;
    583 					HTD0 = 1; 
    584 			//------------------------------------------------------------------

                                                              Page :         17
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

        ----------------------
    585 
    586 			
    587 			//------------- SET UP TIMER E/F Interrupt to increment timers every
         ~X ms ---------------
    588 				(void)irq_setHdr( (unsigned char)IRQ_NO_TMFINT, TMREF_ISR );  //Cle
        ar interrupt request flag
    589 					ETME = 1;	  	// Enable timer E Interrupt (1=ENABLED
***** main\main.c(588) : Warning : W5027 : Meaningless use of an expression
    590 					ETMF = 1;	  	// Enable timer F Interrupt (1=ENABLED)
    591 					QTME = 0;		// Timer E IRQ request flag; 1=REQUEST
    592 					QTMF = 0;		// Timer F IRQ request flag; 1=REQUEST
    593 					TECS0 = 1;		// 111 => Select PLLCLK
    594 					TECS1 = 1;
    595 					TECS2 = 1;
    596 					TFCS0 = 1;		// 111 => Select PLLCLK
    597 					TFCS1 = 1;
    598 					TFCS2 = 1;
    599 					tm_init(TM_CH_NO_EF);
    600 					tm_setEFData(8192);				//A value of 1023 should yield 125us interr
        upts at 8.192 MHz
    601 					tm_setEFSource(TM_CS_HTBCLK);
    602 					tm_startEF();
    603 					TEFM16 = 1;		//1 => sets 16-bit timer mode
    604 				
    605 					HTD3 = 1;	//High-Speed Time Base Counter Divide Register: 1111 = 9
        182kHz
    606 					HTD2 = 1;
    607 					HTD1 = 1;
    608 					HTD0 = 1; 
    609 			//------------------------------------------------------------------
        ----------------------
    610 			
    611 			//------------- SET UP B.3 as an input, and prepare to use as an ext
        ernal interrupt ------
    612 					PB3DIR = 1;
    613 					PB3C1 = 0;
    614 					PB3C0 = 0;
    615 					PB3MD1 = 0;
    616 					PB3MD0 = 0;
    617 					PB3E1 = 1;
    618 					PB3E0 = 0;		//PBnE0-1 are used to choose the Rising-Edge Mode for 
        this interrupt
    619 					PB3SM = 0;
    620 			// -----
    621 			//------------- SET UP EXTERNAL INTERRUPT on B.3 -------------------

                                                              Page :         18
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

        ----------------------
    622 			//Options include following pins: A.0; A.1; A.2. B.0; B.1; B.2 & B.3
        
    623 			(void)irq_setHdr( (unsigned char)IRQ_NO_PB3INT, ExtInt_ISR );  //Cle
        ar interrupt request flag
    624 					EPB3 = 0;	// 1=> Enables Interrupt
***** main\main.c(623) : Warning : W5027 : Meaningless use of an expression
    625 					QPB3 = 0;	// EXT IRQ request flag; 1=REQUEST	
    626 			//------------------------------------------------------------------
        ----------------------   
    627 	
    628 			
    629 	irq_ei(); // Enable Interrupts
    630 	// IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII  
    631 
    632 	// ===== SET UP WATCH DOG TIMER ======================================
        =======
    633 		WDTMOD = 0x03; 	// 0x03=overflow 8sec...
    634 		main_clrWDT(); 	// Clear WDT   
    635 	//====================================================================
        =======
    636 	
    637 	
    638 	// ===== UART Initialization =========================================
        =======
    639 	//
    640 	//	Pin PB0 of mcu => RX  
    641 	// 	Pin PB1 of mcu => TX 
    642 	// 
    643 		(void)uart_init( (unsigned char)UART_CS_HSCLK,	// Generator       			
        	
    644 				 (unsigned short)HSCLK_KHZ,				// HSCLK frequency 				
    645 				 &_uartSetParam );						// Parameters from Structure    
    646 		uart_PortSet();									// Set UART Port Pins
***** main\main.c(645) : Warning : W5027 : Meaningless use of an expression
    647 		_flgUartFin = 0;
    648 		uart_stop();
    649 
    650 	//	
    651 	//====================================================================
        =======
    652 
    653 	// ===== I2C Initialization ==========================================
        =======
    654 	//	(void)i2c_init(I2C_MOD_FST, (unsigned short)HSCLK_KHZ, I2C_SYN_ON);
        

                                                              Page :         19
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    655 	//	I20SYN = 1;		//Enable Clock Stretching	
    656 	//====================================================================
        =======
    657 
    658 
    659 
    660 		
    661 		
    662 }//End Initialization
    663 //=====================================================================
        ======
    664 
    665 
    666 //=====================================================================
        ======
    667 //	OSC set
    668 //=====================================================================
        ======
    669 static void SetOSC(void){
    670 
    671 	//Frequency Control Register 0 (FCON0) 	
    672 	//	used to control the high-speed clock generation circuit and to sele
        ct system clock.
    673 		SYSC0  = 0;			// Used to select the frequency of the HSCLK => 00=8.19
        2MHz.
    674 		SYSC1  = 0;			//...
    675 		OSCM1  = 1;			// 10 => Built-in PLL oscillation mode
    676 		OSCM0  = 0;			//...
    677 		
    678 	// Frequency Control Register 1 (FCON1)
    679 		ENOSC  = 1;			// 1=Enable High Speed Oscillator...
    680 		SYSCLK = 1;			// Select System Clock: 1=HSCLK; 0=LSCLK 
    681 		LPLL   = 1;			// 1=Enables the use of PLL oscillation - ADDED 4/30/20
        13
    682 
    683 	__EI();					//INT enable
    684 }
    685 //=====================================================================
        ======
    686 
    687 
    688 //=====================================================================
        ======
    689 //	Analog Comparator setup
    690 //=====================================================================
        ======

                                                              Page :         20
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    691 void analog_comparator(void){
    692 
    693 //Carl's Notes...
    694 
    695 //Step 1: Select the Interrupt Mode
    696 // 	a.) Interrupt Disabled      => CMPxE1 = 0; CMPxE0 = 0;	  
    697 // 	b.) Falling-Edge Int. Mode  => CMPxE1 = 0; CMPxE0 = 1;
    698 // 	c.) Rising-Edge Int. Mode   => CMPxE1 = 1; CMPxE0 = 0;
    699 // 	d.) Both-Edge Int. Mode     => CMPxE1 = 1; CMPxE0 = 1;
    700 
    701 
    702 //Step 2: Enable the Comparator                       => CMPxEN = 1;	
    703 
    704 //Step 3: Wait 3ms to allow Comparator to stabilize
    705 
    706 //Step 4: Read the comparison result			=> CMPxD: 0= +<-; 1= +>-
    707 
    708 //Step 5: Disable the Comparator				=> CMPxEN = 0;	
    709 
    710 
    711 
    712    //Comparator 0...
    713 	CMP0EN  = 0x01; 	// Comparator ON...
    714 	CMP0E1  = 0x00; 	// No Interupt...
    715 	CMP0E0  = 0x00;
    716 	CMP0SM1 = 0x00; 	// Detect without Sampling... 
    717 	CMP0RFS = 0x01; 	// Differential Input on B5
    718 
    719    //Comparator 0 OFF
    720 	CMP0EN  = 0x00;
    721 
    722 
    723 }
    724 //=====================================================================
        ======
    725 
    726 
    727 
    728 //=====================================================================
        ======
    729 //	Clear All 3 Bits of Port A
    730 //=====================================================================
        ======
    731 void PortA_Low(void){
    732 
    733 //Carl's Notes...

                                                              Page :         21
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    734 
    735 //Step 1: Set Pin Direction...
    736 //Step 2: Set Pin I/O Type...
    737 //Step 3: Set Pin Purpose...
    738 //Step 4: Set Pin Data...
    739 
    740 	//Direction...	
    741 	PA0DIR = 0;		// PortA Bit0 set to Output Mode...
    742 	PA1DIR = 0;		// PortA Bit1 set to Output Mode...
    743 	PA2DIR = 0;		// PortA Bit2 set to Output Mode...
    744 
    745 	//I/O Type...
    746 	PA0C1  = 1;		// PortA Bit0 set to CMOS Output...
    747 	PA0C0  = 1;		
    748 	PA1C1  = 1;		// PortA Bit1 set to CMOS Output...
    749 	PA1C0  = 1;	
    750 	PA2C1  = 1;		// PortA Bit2 set to CMOS Output...
    751 	PA2C0  = 1;	
    752 
    753 	//Purpose...
    754 	PA0MD1  = 0;	// PortA Bit0 set to General Purpose Output...
    755 	PA0MD0  = 0;	
    756 	PA1MD1  = 0;	// PortA Bit1 set to General Purpose Output...
    757 	PA1MD0  = 0;	
    758 	PA2MD1  = 0;	// PortA Bit2 set to General Purpose Output...
    759 	PA2MD0  = 0;	
    760 
    761 	//Data...
    762 	PA0D = 0;		// A.0 Output OFF....
    763 	PA1D = 0;		// A.1 Output OFF....
    764 	PA2D = 0;		// A.2 Output OFF....
    765 
    766 	main_clrWDT(); 	// Clear WDT
    767 
    768 }
    769 //=====================================================================
        ======
    770 
    771 //=====================================================================
        ======
    772 //	Clear All 8 Bits of Port B
    773 //=====================================================================
        ======
    774 void PortB_Low(void){
    775 
    776 //Carl's Notes...

                                                              Page :         22
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    777 
    778 //Step 1: Set Pin Direction...
    779 //Step 2: Set Pin I/O Type...
    780 //Step 3: Set Pin Purpose...
    781 //Step 4: Set Pin Data...
    782 
    783 	//Direction...	
    784 	PB0DIR = 0;		// PortB Bit0 set to Output Mode...
    785 	PB1DIR = 0;		// PortB Bit1 set to Output Mode...
    786 	PB2DIR = 0;		// PortB Bit2 set to Output Mode...
    787 	PB3DIR = 0;		// PortB Bit3 set to Output Mode...
    788 	PB4DIR = 0;		// PortB Bit4 set to Output Mode...
    789 	PB5DIR = 0;		// PortB Bit5 set to Output Mode...
    790 	PB6DIR = 0;		// PortB Bit6 set to Output Mode...
    791 	PB7DIR = 0;		// PortB Bit7 set to Output Mode...
    792 
    793 	//I/O Type...
    794 	PB0C1  = 1;		// PortB Bit0 set to CMOS Output...
    795 	PB0C0  = 1;		
    796 	PB1C1  = 1;		// PortB Bit1 set to CMOS Output...
    797 	PB1C0  = 1;	
    798 	PB2C1  = 1;		// PortB Bit2 set to CMOS Output...
    799 	PB2C0  = 1;	
    800 	PB3C1  = 1;		// PortB Bit3 set to CMOS Output...
    801 	PB3C0  = 1;		
    802 	PB4C1  = 1;		// PortB Bit4 set to CMOS Output...
    803 	PB4C0  = 1;	
    804 	PB5C1  = 1;		// PortB Bit5 set to CMOS Output...
    805 	PB5C0  = 1;	
    806 	PB6C1  = 1;		// PortB Bit6 set to CMOS Output...
    807 	PB6C0  = 1;	
    808 	PB7C1  = 1;		// PortB Bit7 set to CMOS Output...
    809 	PB7C0  = 1;	
    810 
    811 	//Purpose...
    812 	PB0MD1  = 0;	// PortB Bit0 set to General Purpose Output...
    813 	PB0MD0  = 0;	
    814 	PB1MD1  = 0;	// PortB Bit1 set to General Purpose Output...
    815 	PB1MD0  = 0;	
    816 	PB2MD1  = 0;	// PortB Bit2 set to General Purpose Output...
    817 	PB2MD0  = 0;	
    818 	PB3MD1  = 0;	// PortB Bit3 set to General Purpose Output...
    819 	PB3MD0  = 0;	
    820 	PB4MD1  = 0;	// PortB Bit4 set to General Purpose Output...
    821 	PB4MD0  = 0;	
    822 	PB5MD1  = 0;	// PortB Bit5 set to General Purpose Output...

                                                              Page :         23
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    823 	PB5MD0  = 0;
    824 	PB6MD1  = 0;	// PortB Bit6 set to General Purpose Output...
    825 	PB6MD0  = 0;	
    826 	PB7MD1  = 0;	// PortB Bit7 set to General Purpose Output...
    827 	PB7MD0  = 0;
    828 
    829 	//Data...
    830 	PB0D = 0;		// B.0 Output OFF....
    831 	PB1D = 0;		// B.1 Output OFF....
    832 	PB2D = 0;		// B.2 Output OFF....
    833 	PB3D = 0;		// B.3 Output OFF....
    834 	PB4D = 0;		// B.4 Output OFF....
    835 	PB5D = 0;		// B.5 Output OFF....
    836 	PB6D = 0;		// B.6 Output OFF....
    837 	PB7D = 0;		// B.7 Output OFF....
    838 
    839 	main_clrWDT(); 	// Clear WDT
    840 
    841 }
    842 //=====================================================================
        ======
    843 
    844 //=====================================================================
        ======
    845 //	Clear All 4 Bits of Port C
    846 //=====================================================================
        ======
    847 void PortC_Low(void){
    848 
    849 //Carl's Notes...
    850 
    851 //Step 1: Set Pin Direction...
    852 //Step 2: Set Pin I/O Type...
    853 //Step 3: Set Pin Purpose...
    854 //Step 4: Set Pin Data...
    855 
    856 	//Direction...	
    857 	PC0DIR = 0;		// PortC Bit0 set to Output Mode...
    858 	PC1DIR = 0;		// PortC Bit1 set to Output Mode...
    859 	PC2DIR = 0;		// PortC Bit2 set to Output Mode...
    860 	PC3DIR = 0;		// PortC Bit3 set to Output Mode...
    861 
    862 
    863 	//I/O Type...
    864 	PC0C1  = 1;		// PortC Bit0 set to CMOS Output...
    865 	PC0C0  = 1;		

                                                              Page :         24
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    866 	PC1C1  = 1;		// PortC Bit1 set to CMOS Output...
    867 	PC1C0  = 1;	
    868 	PC2C1  = 1;		// PortC Bit2 set to CMOS Output...
    869 	PC2C0  = 1;	
    870 	PC3C1  = 1;		// PortC Bit3 set to CMOS Output...
    871 	PC3C0  = 1;		
    872 
    873 	//Purpose...
    874 	PC0MD1  = 0;	// PortC Bit0 set to General Purpose Output...
    875 	PC0MD0  = 0;	
    876 	PC1MD1  = 0;	// PortC Bit1 set to General Purpose Output...
    877 	PC1MD0  = 0;	
    878 	PC2MD1  = 0;	// PortC Bit2 set to General Purpose Output...
    879 	PC2MD0  = 0;	
    880 	PC3MD1  = 0;	// PortC Bit3 set to General Purpose Output...
    881 	PC3MD0  = 0;	
    882 
    883 	//Data...
    884 	PC0D = 0;		// C.0 Output OFF....
    885 	PC1D = 0;		// C.1 Output OFF....
    886 	PC2D = 0;		// C.2 Output OFF....
    887 	PC3D = 0;		// C.3 Output OFF....
    888 
    889 	main_clrWDT(); 	// Clear WDT
    890 
    891 }
    892 //=====================================================================
        ======
    893 
    894 //=====================================================================
        ======
    895 //	Set All 3 Bits of Port A as Digital Input Pins
    896 //=====================================================================
        ======
    897 void PortA_Digital_Inputs(void){
    898 
    899 //Carl's Notes...
    900 
    901 //Step 1: Set Pin Direction...
    902 //Step 2: Set Pin I/O Type...
    903 //Step 3: Set Pin Purpose...
    904 //Step 4: Set Pin Data...
    905 
    906 	//Direction...	
    907 	PA0DIR = 1;		// PortA Bit0 set to Input Mode...
    908 	PA1DIR = 1;		// PortA Bit1 set to Input Mode...

                                                              Page :         25
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    909 	PA2DIR = 1;		// PortA Bit2 set to Input Mode...
    910 
    911 
    912 	//I/O Type...
    913 	PA0C1  = 1;		// PortA Bit0 set to Input with Pull-Up Resistor...
    914 	PA0C0  = 0;		
    915 	PA1C1  = 1;		// PortA Bit1 set to Input with Pull-Up Resistor...
    916 	PA1C0  = 0;	
    917 	PA2C1  = 1;		// PortA Bit2 set to Input with Pull-Up Resistor...
    918 	PA2C0  = 0;	
    919 
    920 	//Purpose...
    921 	PA0MD1  = 0;	// PortA Bit0 set to General Purpose I/O...
    922 	PA0MD0  = 0;	
    923 	PA1MD1  = 0;	// PortA Bit1 set to General Purpose I/O...
    924 	PA1MD0  = 0;	
    925 	PA2MD1  = 0;	// PortA Bit2 set to General Purpose I/O...
    926 	PA2MD0  = 0;	
    927 
    928 	main_clrWDT(); 	// Clear WDT
    929 
    930 }
    931 //=====================================================================
        ======
    932 
    933 //=====================================================================
        ======
    934 //	PWM Output on Port B - Pin 0
    935 //=====================================================================
        ======
    936 void PWM_B0_ON(int myPeriod, int myDutyCycle){
    937 
    938 		
    939 		//SET THE PERIOD...
    940 			PWCP = myPeriod;		// Init Period to (1=255kHz; 10=46kHz; 50=10kHz; 2
        00=2.5kH; ; 3185 = 160Hz; 3400=150Hz; 4250=120Hz; 5000=102Hz)
    941 
    942 		//PWCD =    10;		//10    ~  0.2 % duty cycle @ 120Hz
    943 		//PWCD =   100;		//100   ~  2.4 % duty cycle @ 120Hz
    944 		//PWCD =  1000;		//1000  ~ 23.5 % duty cycle @ 120Hz
    945 		//PWCD = 4000;		//4000  ~ 94.0 % duty cycle @ 120Hz
    946 		//PWCD = 4150;		//4150  ~ 99.0 % duty cycle @ 120Hz
    947 		//PWCD =    20;		//20    ~  0.4 % duty cycle @ 120Hz	
    948 			PWCD =    myDutyCycle;		//12    ~  0.25% duty cycle @ 160Hz
    949 		
    950 		PCRUN = 1;		// TURN PWM ON

                                                              Page :         26
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    951 
    952 }//END PWM_B0_ON Function
    953 //=====================================================================
        ======
    954 
    955 
    956 
    957 //=====================================================================
        ======
    958 //	PWM Output on Port B - Pin 0
    959 //=====================================================================
        ======
    960 void PinB0_PWM(void){
    961 
    962 //Carl's Notes...
    963 
    964 //Step 1: Set Pin Direction...
    965 //Step 2: Set Pin I/O Type...
    966 //Step 3: Set Pin Purpose...
    967 //Step 4: Select the Clock Mode...
    968 //Step 5: Set the Duty Cycle...
    969 //Step 5: Start the PWM Counter...
    970 
    971 	//Direction...	
    972 	PB0DIR = 0;		// PortB Bit0 set to Output Mode...
    973 
    974 	//I/O Type...
    975 	PB0C1  = 1;		// PortB Bit0 set to CMOS Output...
    976 	PB0C0  = 1;		
    977 
    978 	//Purpose...
    979 	PB0MD1  = 0;	// PortB Bit0 set to PWM Output (0,1)...
    980 	PB0MD0  = 1;	
    981 
    982 
    983 	//Select the Clock Mode...
    984 	PCCS1 = 0;	//00= LS; 01=HS; 10=PLL
    985 	PCCS0 = 1;
    986 
    987 	//SET THE PERIOD...(Added April 4th, 2013)
    988 	PWCP = 4250;		// Init Period to (1=255kHz; 10=46kHz; 50=10kHz; 200=2.5
        kH; ; 3185 = 160Hz; 3400=150Hz; 4250=120Hz; 5000=102Hz)
    989 
    990 	//SET THE DUTY CYCLE...(Added April 15th, 2013)
    991 
    992 	//PWCD =    10;		//10    ~  0.2 % duty cycle @ 120Hz

                                                              Page :         27
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    993 	//PWCD =   100;		//100   ~  2.4 % duty cycle @ 120Hz
    994 	//PWCD =  1000;		//1000  ~ 23.5 % duty cycle @ 120Hz
    995 	//PWCD = 4000;		//4000  ~ 94.0 % duty cycle @ 120Hz
    996 	//PWCD = 4150;		//4150  ~ 99.0 % duty cycle @ 120Hz
    997 	//PWCD =    20;		//20    ~  0.4 % duty cycle @ 120Hz	
    998 	PWCD =    12;		//12    ~  0.25% duty cycle @ 160Hz
    999 
   1000 	PCRUN = 0;		// OFF to start
   1001 
   1002 }
   1003 //=====================================================================
        ======
   1004 
   1005 
   1006 
   1007 
   1008 
   1009 
   1010 
   1011 
   1012 /**********************************************************************
        *********
   1013 	Routine Name:	NOPms
   1014 	Form:			void NOP1000( unsigned int ms )
   1015 	Parameters:		unsigned int sec = "Number of seconds where the device is
         
   1016 						not doing anything"
   1017 	Return value:	void
   1018 	Description:	NOP for x seconds. Uses HTB* clock (512kHz) and 
   1019 					timer A+B (max 0xFFFF)*(HTBCLK = 1/16 * HSCLK 
   1020 					= (1/16)*8192kHz = 512kHz, see HTBDR to change if 
   1021 					we need an even smaller increment timer...)
   1022 					1/(512kHz) * 0xFFFF = 127ms
   1023 					
   1024 ***********************************************************************
        *******/
   1025 /* 
   1026 	void NOPms( unsigned int ms )
   1027 	{
   1028 	unsigned int timerThres;
   1029 	unsigned char TimeFlag;
   1030 	unsigned int TempSec;
   1031 	unsigned int timer;
   1032 	unsigned int timertest;
   1033 
   1034 		TempSec = ms;

                                                              Page :         28
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1035 		TimeFlag = 0;
   1036 
   1037 		tm_init(TM_CH_NO_AB);
   1038 		tm_setABSource(TM_CS_HTBCLK);
   1039 		tm_setABData(0xffff);
   1040 
   1041 		if(ms < 128){
   1042 			timerThres = 0x1FF * ms;
   1043 			TimeFlag = 0;
   1044 		}
   1045 		if(ms == 128){
   1046 			timerThres = 0xFFFF;
   1047 			TimeFlag = 0;
   1048 		}
   1049 		if(ms > 128){
   1050 			while(TempSec > 128){
   1051 				TempSec -= 128;
   1052 				TimeFlag++;
   1053 			}
   1054 			if(TempSec != 0){
   1055 				timerThres = 0x1FF * TempSec;
   1056 			}
   1057 			else{
   1058 				timerThres = 0xFFFF;
   1059 				TimeFlag--;
   1060 			}
   1061 		}
   1062 
   1063 	TimerRestart:
   1064 		main_clrWDT();	
   1065 		//tm_restart89();	//using LSCLK, the maximum delay time we have is ~2
         secs
   1066 		tm_startAB();
   1067 		timer = tm_getABCounter();
   1068 		while(timer < timerThres){
   1069 			timer = tm_getABCounter();
   1070 			timertest = timer;
   1071 		}
   1072 		if(TimeFlag !=0){
   1073 			tm_stopAB();
   1074 			TimeFlag--;
   1075 			timerThres = 0xFFFF;
   1076 			goto TimerRestart;
   1077 		}
   1078 	} //End NOPms 
   1079 */

                                                              Page :         29
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1080 
   1081 /**********************************************************************
        *********
   1082 	Routine Name:	_funcUartFin
   1083 	Form:			static void _funcUartFin( unsigned int size, unsigned char err
        Stat )
   1084 	Parameters:		unsigned int size		 : 
   1085 					unsigned char errStat	 : 
   1086 	Return value:	void
   1087 	Description:	UART transmission completion callback function.
   1088 ***********************************************************************
        *******/
   1089 static void _funcUartFin( unsigned int size, unsigned char errStat )
   1090 {
   1091 	uart_continue();						// Function in UART.c: process to continue send 
        & receive...
   1092 	_flgUartFin = (unsigned char)FLG_SET;
   1093 	main_reqNotHalt();						// uncommented 5/2/2013
   1094 }
   1095 
   1096 /**********************************************************************
        *********
   1097 	Routine Name:	_funcI2CFin
   1098 	Form:			static void _funcUartFin( unsigned int size, unsigned char err
        Stat )
   1099 	Parameters:		unsigned int size		 : 
   1100 					unsigned char errStat	 : 
   1101 	Return value:	void
   1102 	Description:	UART transmission completion callback function.
   1103 ***********************************************************************
        *******/
   1104 static void _funcI2CFin( unsigned int size, unsigned char errStat )
***** main\main.c(1094) : Warning : W5025 : 'errStat': unreferenced formal para
        meter
***** main\main.c(1094) : Warning : W5025 : 'size': unreferenced formal paramet
        er
   1105 {
   1106 	i2c_continue();							// Function in UART.c: process to continue send 
        & receive...
   1107 	_flgI2CFin = (unsigned char)FLG_SET;
   1108 	main_reqNotHalt();						// uncommented 5/2/2013
   1109 }
   1110 
   1111 /**********************************************************************
        *********
   1112 	Routine Name:	_intI2c

                                                              Page :         30
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1113 	Form:			static void _intI2c( void )
   1114 	Parameters:		void
   1115 	Return value:	void
   1116 	Description:	I2C handler.
   1117 ***********************************************************************
        *******/
   1118 static void _intI2c( void )
***** main\main.c(1109) : Warning : W5025 : 'errStat': unreferenced formal para
        meter
***** main\main.c(1109) : Warning : W5025 : 'size': unreferenced formal paramet
        er
   1119 {
   1120 	(void)i2c_continue();
   1121 	main_reqNotHalt();
***** main\main.c(1120) : Warning : W5027 : Meaningless use of an expression
   1122 }
   1123 
   1124 /**********************************************************************
        *********
   1125 	Routine Name:	_intADC
   1126 	Form:			static void _intADC( void )
   1127 	Parameters:		void
   1128 	Return value:	void
   1129 	Description:	I2C handler.
   1130 ***********************************************************************
        *******/
   1131 static void _intADC( void )
   1132 {
   1133 	_flgADCFin = 1;
   1134 }
   1135 
   1136 /**********************************************************************
        *********
   1137 	Routine Name:	main_reqNotHalt
   1138 	Form:			void reqNotHalt( void )
   1139 	Parameters:		void
   1140 	Return value:	void
   1141 	Description:	request not halt.
   1142 ***********************************************************************
        *******/
   1143 void main_reqNotHalt( void )
   1144 {
   1145 	_reqNotHalt = (unsigned char)FLG_SET;
   1146 }
   1147 
   1148 /**********************************************************************

                                                              Page :         31
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

        *********
   1149 	Routine Name:	_intUart
   1150 	Form:			static void _intUart( void )
   1151 	Parameters:		void
   1152 	Return value:	void
   1153 	Description:	UART handler.
   1154 ***********************************************************************
        *******/
   1155 static void _intUart( void )
   1156 {
   1157 	uart_continue(); 	//in UART.c: process to continue send and receive...
        
   1158 }
   1159 
   1160 
   1161 
   1162 
   1163 //=====================================================================
        ======
   1164 //INTERRUPT SERVICE ROUTINE FOR TBC
   1165 static void TBC_ISR( void ) 
   1166 {
   1167 	//Your Code Here...
   1168 	//LED2_pin ^= 1;	// Toggle LED
   1169 	tb_setHtbdiv( (unsigned char)TB_HTD_1_1 ); //Set the ratio of dividing
         frequency of the time base counter
   1170 }
   1171 //=====================================================================
        ======
   1172 
   1173 //=====================================================================
        ======
   1174 //INTERRUPT SERVICE ROUTINE FOR Timer8/9
   1175 static void TMR89_ISR( void ) 
   1176 {
   1177 	//Your Code Here...
   1178 	//LED1_pin ^= 1;
   1179 	tm_init(TM_CH_NO_89);
   1180 	tm_start89();		//Clear & Restart Timer...
   1181 }
   1182 //=====================================================================
        ======
   1183 
   1184 //=====================================================================
        ======
   1185 //INTERRUPT SERVICE ROUTINE FOR TimerA/B

                                                              Page :         32
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1186 static void TMRAB_ISR( void ) 
   1187 {
   1188 	//Your Code Here...
   1189 	//LED4_pin ^= 1;
   1190 	tm_init(TM_CH_NO_AB);
   1191 	tm_startAB();		//Clear & Restart Timer...
   1192 }
   1193 //=====================================================================
        ======
   1194 
   1195 //=====================================================================
        ======
   1196 //INTERRUPT SERVICE ROUTINE FOR TimerE/F
   1197 static void TMREF_ISR( void ) 
   1198 {
   1199 	//Your Code Here...
   1200 	//LED7_pin ^= 1;
   1201 	tm_init(TM_CH_NO_EF);
   1202 	tm_startEF();		//Clear & Restart Timer...
   1203 }
   1204 //=====================================================================
        ======
   1205 
   1206 
   1207 //=====================================================================
        ======
   1208 // ----- ISR for External Interrupt Pin 
   1209 static void ExtInt_ISR( void ) 
   1210 {
   1211 	//Your Code Here...
   1212 	//LED9_pin ^= 1;
   1213 	
   1214 }
   1215 //=====================================================================
        ======
   1216 
   1217 //=====================================================================
        ======
   1218 void NOPx( unsigned int MyCount )
   1219 {
   1220 unsigned int ONCNT = 0;
   1221 unsigned int xxx;
   1222 
   1223 xxx = MyCount;
   1224 
   1225 	while(ONCNT < xxx) {	// NOP for "xxx" Cycles

                                                              Page :         33
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1226 		ONCNT++;
   1227 	}
   1228 	ONCNT = 0;			// Reset Counter 
   1229 }
   1230 //=====================================================================
        ======
   1231 
   1232 
   1233 
   1234 
   1235 
   1236 
   1237 
   1238 
   1239 
   1240 
   1241 
   1242 
   1243 //=====================================================================
        ======
   1244 //Simple function to demonstrate Serial LCD
   1245 void UART_TX_TEST (void)
   1246 {
   1247 	// ===== START UART TX TEST... =====
   1248 		unsigned char UARTStartupMessage[26] = {"ML610Q111 UART - TX Demo: "}
        ;
   1249 		
   1250 		//CLEAR Parallax LCD Display!
   1251 		_flgUartFin = 0;
   1252 		uart_stop();
   1253 		uart_startSend(UARTStartupMessage, 26, _funcUartFin);
   1254 		while(_flgUartFin != 1){
   1255 			main_clrWDT(); 
   1256 		}
   1257 			
   1258 	// ===== END UART TX TEST =====  
   1259 	
   1260 
   1261 }
   1262 //=====================================================================
        ======
   1263 
   1264 //=====================================================================
        ======
   1265 void UART_RX_TEST(void){
   1266 

                                                              Page :         34
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1267 	unsigned char	MyRx[1];	//Small Array...for UART Receive, etc
   1268 	int i;
   1269  	
   1270 	// CLEAR the Array...
   1271 		for(i = 0; i<1; i++) 
   1272 		{
   1273 			MyRx[i] = 0x20;	// 0x20 = "Space" => Clear Array
   1274 		} 
   1275 	 
   1276 	
   1277 	// ===== START UART RX TEST... =====
   1278 		_flgUartFin = 0;
   1279 		uart_stop();
   1280 		uart_startReceive(MyRx, 1, _funcUartFin);	// RX!
   1281 		while(_flgUartFin != 1){
   1282 			main_clrWDT();	
   1283 			//LED5_pin ^= 1;	//waiting for data...
   1284 		}
   1285 		
   1286  		//If data in RX Buffer...echo it out the TX port
   1287 		if(MyRx[0] != 0x20){			
   1288 			//Echo the Received Data
   1289 			_flgUartFin = 0;
   1290 			uart_stop();
   1291 			uart_startSend(MyRx, 1, _funcUartFin);	// TX!
   1292 			while(_flgUartFin != 1){
   1293 				main_clrWDT(); 
   1294 			}
   1295 		} 
   1296 	// ===== END UART RX TEST =====
   1297 		
   1298 }
   1299 //=====================================================================
        ======
   1300 
   1301 
   1302 
   1303 ***** main\main.c(1303) : Warning : W5030 : 'tm_get89Counter': unreferenced sta
        tic function
***** main\main.c(1303) : Warning : W5030 : 'tm_getEFSource': unreferenced stat
        ic function
***** main\main.c(1303) : Warning : W5030 : 'tm_getABSource': unreferenced stat
        ic function
***** main\main.c(1303) : Warning : W5030 : 'tm_get89Source': unreferenced stat
        ic function

                                                              Page :         35
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

***** main\main.c(1303) : Warning : W5030 : 'tm_restartAB': unreferenced static
         function
***** main\main.c(1303) : Warning : W5030 : 'tm_clrABCounter': unreferenced sta
        tic function
***** main\main.c(1303) : Warning : W5030 : 'tm_restartEF': unreferenced static
         function
***** main\main.c(1303) : Warning : W5030 : 'tm_clrEFCounter': unreferenced sta
        tic function
***** main\main.c(1303) : Warning : W5030 : 'tm_getABCounter': unreferenced sta
        tic function
***** main\main.c(1303) : Warning : W5030 : 'tm_getEFCounter': unreferenced sta
        tic function
***** main\main.c(1303) : Warning : W5030 : 'tm_stop89': unreferenced static fu
        nction
***** main\main.c(1303) : Warning : W5030 : 'tm_stopEF': unreferenced static fu
        nction
***** main\main.c(1303) : Warning : W5030 : 'tm_stopAB': unreferenced static fu
        nction
***** main\main.c(1303) : Warning : W5030 : 'tm_setAOneshot': unreferenced stat
        ic function
***** main\main.c(1303) : Warning : W5030 : 'tm_setBOneshot': unreferenced stat
        ic function
***** main\main.c(1303) : Warning : W5030 : 'tm_set9Oneshot': unreferenced stat
        ic function
***** main\main.c(1303) : Warning : W5030 : 'tm_set8Oneshot': unreferenced stat
        ic function
***** main\main.c(1303) : Warning : W5030 : '_funcI2CFin': unreferenced static 
        function
***** main\main.c(1303) : Warning : W5030 : 'tm_clr89Counter': unreferenced sta
        tic function
***** main\main.c(1303) : Warning : W5030 : 'tm_restart89': unreferenced static
         function



Error(s)     :  0
Warning(s)   :  51



                                                              Page :         36
                                                              Date : 08-01-2014
                                                              Time :   13:53:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c



                            STACK INFORMATION
                            -----------------

  FUNCTION                         LOCALS    CONTEXT    OTHERS    TOTAL
  --------                         ------    -------    ------    -----
  _feram_init                      0         2          2         4         
  _feram_write                     0         4          0         4         
  _feram_read                      0         4          0         4         
  _feram_continue                  2         4          8         14        
  _feram_stop                      0         2          0         2         
  _feram_getStatus                 0         0          0         0         
  __i2cFin                         2         6          0         8         
  _main                            0         0          0         0         
  _main_clrWDT                     0         0          0         0         
  _Initialization                  0         2          2         4         
  _SetOSC                          0         0          0         0         
  _analog_comparator               0         0          0         0         
  _PortA_Low                       0         0          0         0         
  _PortB_Low                       0         0          0         0         
  _PortC_Low                       0         0          0         0         
  _PortA_Digital_Inputs            0         0          0         0         
  _PWM_B0_ON                       0         0          0         0         
  _PinB0_PWM                       0         0          0         0         
  __funcUartFin                    0         2          0         2         
  __funcI2CFin                     0         2          0         2         
  __intI2c                         0         2          0         2         
  __intADC                         0         0          0         0         
  _main_reqNotHalt                 0         0          0         0         
  __intUart                        0         0          0         0         
  _TBC_ISR                         0         0          0         0         
  _TMR89_ISR                       0         2          0         2         
  _TMRAB_ISR                       0         2          0         2         
  _TMREF_ISR                       0         2          0         2         
  _ExtInt_ISR                      0         0          0         0         
  _NOPx                            4         4          0         8         
  _UART_TX_TEST                    26        4          2         32        
  _UART_RX_TEST                    2         4          2         8         
